<?php

namespace Polcode\WhenBusArrivesBundle\TimetableLoaderDrivers\Kzkgop;

use Polcode\WhenBusArrivesBundle\TimetableLoaderDrivers\Kzkgop\BusLiniesLoader;
use Polcode\WhenBusArrivesBundle\Entity\BusLine;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-08 at 13:17:47.
 */
class BusLiniesLoaderTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var BusLiniesLoader
     */
    protected $object;

    /**
     *
     * @var BusLine[]
     */
    private $busLines;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new BusLiniesLoader;

        $busStop = new \Polcode\WhenBusArrivesBundle\Entity\BusStop();
        $busStop->setName('Bieruń Dom Kultury'); //it isn't important
        $busStop->setUrl('http://rozklady.kzkgop.pl/index.php?co=linie_przystanku&id_przystanku=2345');


        $this->busLines = $this->object->loadAndGetLinesWithArrivals($busStop);
    }

    public function testIfBusLineListIsArray() {
        $this->assertTrue(is_array($this->busLines));
    }

    public function testIfBusLineListConsistBusLines() {
        $searchedLines = array(
            array('name' => '931', 'direction' => 'Zawodzie Pętla'),
            array('name' => '931', 'direction' => 'Bieruń Plac Nobla'),
            array('name' => '995', 'direction' => 'Mysłowice Towarowa'),
            array('name' => '995', 'direction' => 'Lędziny Kopalnia Ziemowit')
        );
        $found = array_fill(0, count($searchedLines), false);

        foreach ($searchedLines as $i => $oneSearchedLine) {
            if ($this->getIndexOfBusLine($oneSearchedLine) >= 0) {
                $found[$i] = true;
            }
        }

        foreach ($found as $i => $oneFound) {
            $this->assertTrue($oneFound, strtr('Bus Line list dont consist line with name=:name ane direction=:direction', array(
                ':name' => $searchedLines[$i]['name'],
                ':direction' => $searchedLines[$i]['direction']
            )));
        }
    }

    /**
     * return idex from array or -1 when not found
     * @param array $parameters
     * @return int 
     */
    private function getIndexOfBusLine(array $parameters) {
        foreach ($this->busLines as $i => $oneBusLine) {
            if ($oneBusLine->getName() === $parameters['name'] && $oneBusLine->getDirection() === $parameters['direction']) {
                return $i;
            }
        }
        return -1;
    }

    public function testIfBusLineListConsistTimetables() {
        $index = $this->getIndexOfBusLine(array('name' => '931', 'direction' => 'Zawodzie Pętla'));
        $concreteBusLine = $this->busLines[$index];
        
        $timetables = $concreteBusLine->getTimetables();
        
        foreach ($timetables as $oneTimetable) {
            $this->assertNotNull($oneTimetable->getType());
        }
        
    }

    public function testIfBusLineListConsistArrivals() {
        $index = $this->getIndexOfBusLine(array('name' => '931', 'direction' => 'Zawodzie Pętla'));
        $concreteBusLine = $this->busLines[$index];
        
        $timetables = $concreteBusLine->getTimetables();
        $timetable = $timetables[0];
        
        $arrivals = $timetable->getArrivals();
        foreach($arrivals as $oneArrival) {
            $this->assertRegExp('/^[0-9]{1,2}:[0-9]{2}$/', $oneArrival->getTime());
        }
        
    }
    
}
